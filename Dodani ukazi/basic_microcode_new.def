

fetch:	addrsel=pc irload=1 			# Address=PC, Load IR register
	pcload=1  pcsel=pc, opcode_jump		# PC=PC+1, jump to 2+OPC
#
# ALU operations on Rd,Rs,Rt
# add Rd,Rs,Rt
0:	aluop=add  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch			# ALU=+, ALU 2nd op = treg, write from aluout to reg

1: aluop=sub  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch # TO JE NA NOVO

# addi Rd,Rs,immed  ; Rd <- Rs + immed	PC <- PC + 2 TO JE NA NOVO
16:	addrsel=pc imload=1
	aluop=add  op2sel=immed dwrite=1  regsrc=aluout, goto pcincr

17: addrsel=pc imload=1 # TO JE NA NOVO
	aluop=sub  op2sel=immed dwrite=1  regsrc=aluout, goto pcincr

#
# Jump compared to zero operations
#
# JNEZ Rs,immed  ; If Rs != 0, PC <- immed else  PC <- PC + 2
40:	addrsel=pc  imload=1								            # Read Immediate operand -> IMRegister
	aluop=sub  op2sel=const0, if z then pcincr else jump		    # If z then pcincr else jump to immed; opsel=0 means value of 2 (constant 0 is selected!!!)

# jgtz Rs,immed (41) ; if Rs > 0, PC <- immed else  PC <- PC + 2 TO JE NA NOVO
#41:	address=pc	imload=1
#	aluop=sub  op2sel=const0, if not z then pcincr else jump

# jmp immed  ; PC <- immed TO JE NA NOVO
45:	addrsel=pc	imload=1
	pcload=1  pcsel=immed, goto fetch

# beq Rs,Rt,immed (46)  ; if Rs == Rt, PC <- PC + immed else  PC <- PC + 2 TO JE NA NOVO
46:	addrsel=pc	imload=1
	aluop=sub op2sel=treg, if z then b_jump else pcincr

# bne bne Rs,Rt,immed (47)  ; if Rs != Rt, PC <- PC + immed else  PC <- PC + 2 TO JE NA NOVO	
47: addrsel=pc  imload=1
	aluop=sub op2sel=treg, if z then pcincr else b_jump

#
# li Rd,Immed    ; Load immediate Rd, immed   
63:	addrsel=pc  dwrite=1  regsrc=databus, goto pcincr				# additional increment (cause immed was read) and then new command
#	pcload=1  pcsel=pc, goto fetch                                  # not optimal way to do this, better goto to pcincr: instead (line above)

#
# sw Rd,immed    ; Store Rd into M[immed] Rd->M[immed]; 
65:	addrsel=pc  imload=1
	addrsel=immed  datawrite=1  datasel=dreg, goto pcincr			# additional increment (cause immed was read) and then new command
#	pcload=1  pcsel=pc, goto fetch                                  # not optimal way to do this, better goto to pcincr: instead (line above)

# move Rd,Rs (70)  ; Rd <- Rs TO JE NA NOVO
70: dwrite=1 regsrc=sreg, goto fetch

#
# Other code which we call
#
# Increment PC and goto new command; for all commands that use immediate operand - they need additional PC increment !
pcincr:	pcload=1  pcsel=pc, goto fetch

# Set address to immed and goto new command; for jumps to absolute immed address
jump:	pcload=1  pcsel=immed, goto fetch

# Za pogojne skoke TO JE NA NOVO
b_jump: pcload=1 pcsel=pcimmed, goto fetch
